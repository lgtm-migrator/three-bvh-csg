{"mappings":"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","sources":["examples/geometry.js","node_modules/three/examples/jsm/math/MeshSurfaceSampler.js"],"sourcesContent":["import * as THREE from 'three';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\nimport { MeshSurfaceSampler } from 'three/examples/jsm/math/MeshSurfaceSampler.js';\nimport {\n\tBrush,\n\tEvaluator,\n\tADDITION,\n\tSUBTRACTION,\n\tINTERSECTION,\n\tDIFFERENCE,\n} from '..';\n\nconst params = {\n\n\toperation: SUBTRACTION,\n\twireframe: false,\n\tdisplayBrushes: false,\n\tshadows: true,\n\tuseGroups: true,\n\n\trandomize: () => {\n\n\t\trandomizeBrushes();\n\t\tupdateCSG();\n\n\t}\n};\n\nlet renderer, camera, scene, controls, gui, outputContainer;\nlet bunnyBrush, brushes;\nlet material, surfaceSampler;\nlet resultObject, wireframeResult, light;\nlet csgEvaluator = new Evaluator();\ncsgEvaluator.attributes = [ 'position', 'normal' ];\ncsgEvaluator.useGroups = false;\n\nconst materialMap = new Map();\n\ninit();\n\nasync function init() {\n\n\tconst bgColor = 0x111111;\n\n\toutputContainer = document.getElementById( 'output' );\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\trenderer.shadowMap.enabled = true;\n\trenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\trenderer.outputEncoding = THREE.sRGBEncoding;\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\n\t// lights\n\tlight = new THREE.DirectionalLight( 0xffffff, 1 );\n\tlight.position.set( 1, 2, 1 );\n\tscene.add( light, new THREE.AmbientLight( 0xb0bec5, 0.1 ) );\n\n\t// shadows\n\tconst shadowCam = light.shadow.camera;\n\tlight.castShadow = true;\n\tlight.shadow.mapSize.setScalar( 4096 );\n\tlight.shadow.bias = 1e-5;\n\tlight.shadow.normalBias = 1e-2;\n\n\tshadowCam.left = shadowCam.bottom = - 2.5;\n\tshadowCam.right = shadowCam.top = 2.5;\n\tshadowCam.updateProjectionMatrix();\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( 0, 0.65, 2.5 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\t// controls\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\n\t// floor\n\tconst floor = new THREE.Mesh( new THREE.PlaneBufferGeometry(), new THREE.ShadowMaterial( { opacity: 0.05 } ) );\n\tfloor.material.color.set( 0xE0F7FA ).convertSRGBToLinear();\n\tfloor.rotation.x = - Math.PI / 2;\n\tfloor.scale.setScalar( 10 );\n\tfloor.position.y = - 0.5;\n\tfloor.receiveShadow = true;\n\tscene.add( floor );\n\n\tconst gltf = await new GLTFLoader()\n\t\t.setMeshoptDecoder( MeshoptDecoder )\n\t\t.loadAsync( 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/stanford-bunny/bunny.glb' );\n\n\tconst geometry = gltf.scene.children[ 0 ].geometry;\n\tgeometry.computeVertexNormals();\n\n\t// initialize brushes\n\tbunnyBrush = new Brush( geometry, new THREE.MeshStandardMaterial() );\n\tbunnyBrush.position.y = - 0.5;\n\tbunnyBrush.updateMatrixWorld();\n\tbunnyBrush.receiveShadow = true;\n\tscene.add( bunnyBrush );\n\n\tmaterial = new THREE.MeshStandardMaterial();\n\tbrushes = [];\n\n\tsurfaceSampler = new MeshSurfaceSampler( bunnyBrush );\n\tsurfaceSampler.build();\n\n\tfor ( let i = 0; i < 50; i ++ ) {\n\n\t\tconst b = new Brush( new THREE.SphereBufferGeometry( 1, 15, 15 ), material );\n\t\tb.receiveShadow = true;\n\t\tscene.add( b );\n\t\tbrushes.push( b );\n\n\t}\n\n\t// initialize materials\n\tbunnyBrush.material.opacity = 0.15;\n\tbunnyBrush.material.transparent = true;\n\tbunnyBrush.material.depthWrite = false;\n\tbunnyBrush.material.polygonOffset = true;\n\tbunnyBrush.material.polygonOffsetFactor = 0.1;\n\tbunnyBrush.material.polygonOffsetUnits = 0.1;\n\tbunnyBrush.material.side = THREE.DoubleSide;\n\tbunnyBrush.material.premultipliedAlpha = true;\n\tbunnyBrush.material.color.set( 0xE0F7FA ).convertSRGBToLinear();\n\n\tmaterial.opacity = 0.15;\n\tmaterial.transparent = true;\n\tmaterial.depthWrite = false;\n\tmaterial.polygonOffset = true;\n\tmaterial.polygonOffsetFactor = 0.1;\n\tmaterial.polygonOffsetUnits = 0.1;\n\tmaterial.side = THREE.DoubleSide;\n\tmaterial.premultipliedAlpha = true;\n\tmaterial.roughness = 0.25;\n\tmaterial.color.set( 0x4DD0E1 ).convertSRGBToLinear();\n\n\t// create solid material equivalents\n\tlet mat;\n\tmat = bunnyBrush.material.clone();\n\tmat.opacity = 1;\n\tmat.transparent = false;\n\tmat.depthWrite = true;\n\tmaterialMap.set( bunnyBrush.material, mat );\n\n\tmat = material.clone();\n\tmat.opacity = 1;\n\tmat.transparent = false;\n\tmat.depthWrite = true;\n\tmaterialMap.set( material, mat );\n\n\t// add object displaying the result\n\tresultObject = new THREE.Mesh( new THREE.BufferGeometry(), new THREE.MeshStandardMaterial( {\n\t\troughness: 0.1,\n\t\tflatShading: false,\n\t\tpolygonOffset: true,\n\t\tpolygonOffsetUnits: 1,\n\t\tpolygonOffsetFactor: 1,\n\t} ) );\n\tresultObject.castShadow = true;\n\tresultObject.receiveShadow = true;\n\tscene.add( resultObject );\n\n\t// add wireframe representation\n\twireframeResult = new THREE.Mesh( resultObject.geometry, new THREE.MeshBasicMaterial( {\n\t\twireframe: true,\n\t\tcolor: 0,\n\t\topacity: 0.15,\n\t\ttransparent: true,\n\t} ) );\n\twireframeResult.material.color.set( 0x001516 ).convertSRGBToLinear();\n\tscene.add( wireframeResult );\n\n\t// gui\n\tgui = new GUI();\n\tgui.add( params, 'operation', { ADDITION, SUBTRACTION, INTERSECTION, DIFFERENCE } ).onChange( () => {\n\n\t\tupdateCSG();\n\n\t} );\n\tgui.add( params, 'displayBrushes' );\n\tgui.add( params, 'shadows' );\n\tgui.add( params, 'wireframe' );\n\tgui.add( params, 'useGroups' ).onChange( updateCSG );\n\tgui.add( params, 'randomize' );\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n\trandomizeBrushes();\n\tupdateCSG();\n\trender();\n\n}\n\nfunction updateCSG() {\n\n\tconst startTime = window.performance.now();\n\tlet finalBrush = brushes[ 0 ];\n\tcsgEvaluator.useGroups = false;\n\tfor ( let i = 1, l = brushes.length; i < l; i ++ ) {\n\n\t\tconst b = brushes[ i ];\n\t\tfinalBrush = csgEvaluator.evaluate( finalBrush, b, ADDITION );\n\t\tfinalBrush.material = material;\n\n\t}\n\n\tcsgEvaluator.useGroups = params.useGroups;\n\tcsgEvaluator.evaluate( bunnyBrush, finalBrush, params.operation, resultObject );\n\tif ( params.useGroups ) {\n\n\t\tresultObject.material = resultObject.material.map( m => materialMap.get( m ) );\n\n\t} else {\n\n\t\tresultObject.material = materialMap.get( bunnyBrush.material );\n\n\t}\n\n\tconst deltaTime = window.performance.now() - startTime;\n\toutputContainer.innerText = `${ deltaTime.toFixed( 3 ) }ms`;\n\n}\n\nfunction randomizeBrushes() {\n\n\tfor ( let i = 0; i < brushes.length; i ++ ) {\n\n\t\tconst b = brushes[ i ];\n\t\tsurfaceSampler.sample( b.position );\n\t\tb.position.applyMatrix4( bunnyBrush.matrixWorld );\n\t\tb.scale.setScalar( THREE.MathUtils.lerp( 0.05, 0.15, Math.random() ) );\n\t\tb.updateMatrixWorld();\n\n\t}\n\n}\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\twireframeResult.visible = params.wireframe;\n\tbunnyBrush.visible = params.displayBrushes;\n\tbrushes.forEach( b => b.visible = params.displayBrushes );\n\n\tlight.castShadow = params.shadows;\n\n\trenderer.render( scene, camera );\n\n}\n\n\n\n","import {\n\tTriangle,\n\tVector3\n} from 'three';\n\n/**\n * Utility class for sampling weighted random points on the surface of a mesh.\n *\n * Building the sampler is a one-time O(n) operation. Once built, any number of\n * random samples may be selected in O(logn) time. Memory usage is O(n).\n *\n * References:\n * - http://www.joesfer.com/?p=84\n * - https://stackoverflow.com/a/4322940/1314762\n */\n\nconst _face = new Triangle();\nconst _color = new Vector3();\n\nclass MeshSurfaceSampler {\n\n\tconstructor( mesh ) {\n\n\t\tlet geometry = mesh.geometry;\n\n\t\tif ( ! geometry.isBufferGeometry || geometry.attributes.position.itemSize !== 3 ) {\n\n\t\t\tthrow new Error( 'THREE.MeshSurfaceSampler: Requires BufferGeometry triangle mesh.' );\n\n\t\t}\n\n\t\tif ( geometry.index ) {\n\n\t\t\tconsole.warn( 'THREE.MeshSurfaceSampler: Converting geometry to non-indexed BufferGeometry.' );\n\n\t\t\tgeometry = geometry.toNonIndexed();\n\n\t\t}\n\n\t\tthis.geometry = geometry;\n\t\tthis.randomFunction = Math.random;\n\n\t\tthis.positionAttribute = this.geometry.getAttribute( 'position' );\n\t\tthis.colorAttribute = this.geometry.getAttribute( 'color' );\n\t\tthis.weightAttribute = null;\n\n\t\tthis.distribution = null;\n\n\t}\n\n\tsetWeightAttribute( name ) {\n\n\t\tthis.weightAttribute = name ? this.geometry.getAttribute( name ) : null;\n\n\t\treturn this;\n\n\t}\n\n\tbuild() {\n\n\t\tconst positionAttribute = this.positionAttribute;\n\t\tconst weightAttribute = this.weightAttribute;\n\n\t\tconst faceWeights = new Float32Array( positionAttribute.count / 3 );\n\n\t\t// Accumulate weights for each mesh face.\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i += 3 ) {\n\n\t\t\tlet faceWeight = 1;\n\n\t\t\tif ( weightAttribute ) {\n\n\t\t\t\tfaceWeight = weightAttribute.getX( i )\n\t\t\t\t\t+ weightAttribute.getX( i + 1 )\n\t\t\t\t\t+ weightAttribute.getX( i + 2 );\n\n\t\t\t}\n\n\t\t\t_face.a.fromBufferAttribute( positionAttribute, i );\n\t\t\t_face.b.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t_face.c.fromBufferAttribute( positionAttribute, i + 2 );\n\t\t\tfaceWeight *= _face.getArea();\n\n\t\t\tfaceWeights[ i / 3 ] = faceWeight;\n\n\t\t}\n\n\t\t// Store cumulative total face weights in an array, where weight index\n\t\t// corresponds to face index.\n\n\t\tthis.distribution = new Float32Array( positionAttribute.count / 3 );\n\n\t\tlet cumulativeTotal = 0;\n\n\t\tfor ( let i = 0; i < faceWeights.length; i ++ ) {\n\n\t\t\tcumulativeTotal += faceWeights[ i ];\n\n\t\t\tthis.distribution[ i ] = cumulativeTotal;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetRandomGenerator( randomFunction ) {\n\n\t\tthis.randomFunction = randomFunction;\n\t\treturn this;\n\n\t}\n\n\tsample( targetPosition, targetNormal, targetColor ) {\n\n\t\tconst cumulativeTotal = this.distribution[ this.distribution.length - 1 ];\n\n\t\tconst faceIndex = this.binarySearch( this.randomFunction() * cumulativeTotal );\n\n\t\treturn this.sampleFace( faceIndex, targetPosition, targetNormal, targetColor );\n\n\t}\n\n\tbinarySearch( x ) {\n\n\t\tconst dist = this.distribution;\n\t\tlet start = 0;\n\t\tlet end = dist.length - 1;\n\n\t\tlet index = - 1;\n\n\t\twhile ( start <= end ) {\n\n\t\t\tconst mid = Math.ceil( ( start + end ) / 2 );\n\n\t\t\tif ( mid === 0 || dist[ mid - 1 ] <= x && dist[ mid ] > x ) {\n\n\t\t\t\tindex = mid;\n\n\t\t\t\tbreak;\n\n\t\t\t} else if ( x < dist[ mid ] ) {\n\n\t\t\t\tend = mid - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstart = mid + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn index;\n\n\t}\n\n\tsampleFace( faceIndex, targetPosition, targetNormal, targetColor ) {\n\n\t\tlet u = this.randomFunction();\n\t\tlet v = this.randomFunction();\n\n\t\tif ( u + v > 1 ) {\n\n\t\t\tu = 1 - u;\n\t\t\tv = 1 - v;\n\n\t\t}\n\n\t\t_face.a.fromBufferAttribute( this.positionAttribute, faceIndex * 3 );\n\t\t_face.b.fromBufferAttribute( this.positionAttribute, faceIndex * 3 + 1 );\n\t\t_face.c.fromBufferAttribute( this.positionAttribute, faceIndex * 3 + 2 );\n\n\t\ttargetPosition\n\t\t\t.set( 0, 0, 0 )\n\t\t\t.addScaledVector( _face.a, u )\n\t\t\t.addScaledVector( _face.b, v )\n\t\t\t.addScaledVector( _face.c, 1 - ( u + v ) );\n\n\t\tif ( targetNormal !== undefined ) {\n\n\t\t\t_face.getNormal( targetNormal );\n\n\t\t}\n\n\t\tif ( targetColor !== undefined && this.colorAttribute !== undefined ) {\n\n\t\t\t_face.a.fromBufferAttribute( this.colorAttribute, faceIndex * 3 );\n\t\t\t_face.b.fromBufferAttribute( this.colorAttribute, faceIndex * 3 + 1 );\n\t\t\t_face.c.fromBufferAttribute( this.colorAttribute, faceIndex * 3 + 2 );\n\n\t\t\t_color\n\t\t\t\t.set( 0, 0, 0 )\n\t\t\t\t.addScaledVector( _face.a, u )\n\t\t\t\t.addScaledVector( _face.b, v )\n\t\t\t\t.addScaledVector( _face.c, 1 - ( u + v ) );\n\n\t\t\ttargetColor.r = _color.x;\n\t\t\ttargetColor.g = _color.y;\n\t\t\ttargetColor.b = _color.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MeshSurfaceSampler };\n"],"names":["$ilwiq","parcelRequire","$6ad73aa5bbba7cf7$var$_face","Triangle","$6ad73aa5bbba7cf7$var$_color","Vector3","$6ad73aa5bbba7cf7$export$45494d519eb31ab","constructor","mesh","geometry","isBufferGeometry","attributes","position","itemSize","Error","index","console","warn","toNonIndexed","this","randomFunction","Math","random","positionAttribute","getAttribute","colorAttribute","weightAttribute","distribution","setWeightAttribute","name","build","faceWeights","Float32Array","count","i","faceWeight","getX","a","fromBufferAttribute","b","c","getArea","cumulativeTotal","i1","length","setRandomGenerator","sample","targetPosition","targetNormal","targetColor","faceIndex","binarySearch","sampleFace","x","dist","start","end","mid","ceil","u","v","set","addScaledVector","undefined","getNormal","r","g","y","z","$ab16bf80078dbe17$var$params","operation","$4CEV9","SUBTRACTION","wireframe","displayBrushes","shadows","useGroups","randomize","$ab16bf80078dbe17$var$randomizeBrushes","$ab16bf80078dbe17$var$updateCSG","$ab16bf80078dbe17$var$renderer","$ab16bf80078dbe17$var$camera","$ab16bf80078dbe17$var$scene","$ab16bf80078dbe17$var$controls","$ab16bf80078dbe17$var$gui","$ab16bf80078dbe17$var$outputContainer","$ab16bf80078dbe17$var$bunnyBrush","$ab16bf80078dbe17$var$brushes","$ab16bf80078dbe17$var$material","$ab16bf80078dbe17$var$surfaceSampler","$ab16bf80078dbe17$var$resultObject","$ab16bf80078dbe17$var$wireframeResult","$ab16bf80078dbe17$var$light","$ab16bf80078dbe17$var$csgEvaluator","Evaluator","$ab16bf80078dbe17$var$materialMap","Map","startTime","window","performance","now","finalBrush","l","evaluate","ADDITION","material","map","m","get","deltaTime","innerText","toFixed","applyMatrix4","matrixWorld","scale","setScalar","MathUtils","lerp","updateMatrixWorld","$ab16bf80078dbe17$var$render","requestAnimationFrame","visible","forEach","castShadow","render","async","document","getElementById","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","outputEncoding","sRGBEncoding","body","appendChild","domElement","Scene","DirectionalLight","add","AmbientLight","shadowCam","shadow","camera","mapSize","bias","normalBias","left","bottom","right","top","updateProjectionMatrix","PerspectiveCamera","far","$5Rd1x","OrbitControls","floor","Mesh","PlaneBufferGeometry","ShadowMaterial","opacity","color","convertSRGBToLinear","rotation","PI","receiveShadow","$7lx9d","GLTFLoader","setMeshoptDecoder","$kp7Te","MeshoptDecoder","loadAsync","scene","children","computeVertexNormals","Brush","MeshStandardMaterial","SphereBufferGeometry","push","mat","transparent","depthWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","side","DoubleSide","premultipliedAlpha","roughness","clone","BufferGeometry","flatShading","MeshBasicMaterial","$jiuw3","GUI","INTERSECTION","DIFFERENCE","onChange","addEventListener","aspect","$ab16bf80078dbe17$var$init"],"version":3,"file":"geometry.11133ed7.js.map"}