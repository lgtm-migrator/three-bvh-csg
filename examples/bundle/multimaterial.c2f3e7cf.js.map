{"mappings":"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","sources":["examples/multimaterial.js"],"sourcesContent":["import * as THREE from 'three';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport {\n\tBrush,\n\tEvaluator,\n\tADDITION,\n\tSUBTRACTION,\n\tINTERSECTION,\n} from '..';\n\nlet renderer, camera, scene, controls, gui, light, wireframeResult;\ninit();\nrender();\n\nasync function init() {\n\n\tconst bgColor = 0x111111;\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\trenderer.shadowMap.enabled = true;\n\trenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\trenderer.outputEncoding = THREE.sRGBEncoding;\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\n\t// lights\n\tlight = new THREE.DirectionalLight( 0xffffff, 1 );\n\tlight.position.set( 1, 2, 1 );\n\tscene.add( light, new THREE.AmbientLight( 0xb0bec5, 0.1 ) );\n\n\t// shadows\n\tconst shadowCam = light.shadow.camera;\n\tlight.castShadow = true;\n\tlight.shadow.mapSize.setScalar( 4096 );\n\tlight.shadow.bias = 1e-5;\n\tlight.shadow.normalBias = 1e-2;\n\n\tshadowCam.left = shadowCam.bottom = - 2.5;\n\tshadowCam.right = shadowCam.top = 2.5;\n\tshadowCam.updateProjectionMatrix();\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( - 2, 1.5, 2 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\t// controls\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\n\t// floor\n\tconst floor = new THREE.Mesh( new THREE.PlaneBufferGeometry(), new THREE.ShadowMaterial( { opacity: 0.05 } ) );\n\tfloor.material.color.set( 0xE0F7FA ).convertSRGBToLinear();\n\tfloor.rotation.x = - Math.PI / 2;\n\tfloor.scale.setScalar( 10 );\n\tfloor.position.y = - 0.75;\n\tfloor.receiveShadow = true;\n\tscene.add( floor );\n\n\t// materials\n\tconst redMaterial = new THREE.MeshStandardMaterial( { roughness: 0.25 } );\n\tconst greenMaterial = new THREE.MeshStandardMaterial( { roughness: 0.25 } );\n\tconst blueMaterial = new THREE.MeshStandardMaterial( { roughness: 0.25 } );\n\n\tredMaterial.color.set( 0xFF1744 ).convertSRGBToLinear();\n\tgreenMaterial.color.set( 0x76FF03 ).convertSRGBToLinear();\n\tblueMaterial.color.set( 0x2979FF ).convertSRGBToLinear();\n\n\t// basic pieces\n\tconst cylinder1 = new Brush( new THREE.CylinderBufferGeometry( 0.5, 0.5, 6, 45 ), blueMaterial );\n\tcylinder1.updateMatrixWorld();\n\n\tconst cylinder2 = new Brush( new THREE.CylinderBufferGeometry( 0.5, 0.5, 6, 45 ), blueMaterial );\n\tcylinder2.rotation.x = Math.PI / 2;\n\tcylinder2.updateMatrixWorld();\n\n\tconst cylinder3 = new Brush( new THREE.CylinderBufferGeometry( 0.5, 0.5, 6, 45 ), blueMaterial );\n\tcylinder3.rotation.z = Math.PI / 2;\n\tcylinder3.updateMatrixWorld();\n\n\tconst sphere = new Brush( new THREE.SphereBufferGeometry( 1, 50, 50 ), greenMaterial );\n\tsphere.updateMatrixWorld();\n\n\tconst box = new Brush( new THREE.BoxBufferGeometry( 1.5, 1.5, 1.5 ), redMaterial );\n\tbox.updateMatrixWorld();\n\n\t// processing\n\tconst evaluator = new Evaluator();\n\tlet result;\n\tresult = evaluator.evaluate( cylinder1, cylinder2, ADDITION );\n\tresult = evaluator.evaluate( result, cylinder3, ADDITION );\n\tresult = evaluator.evaluate( sphere, result, SUBTRACTION );\n\tresult = evaluator.evaluate( box, result, INTERSECTION );\n\n\tresult.castShadow = true;\n\tresult.receiveShadow = true;\n\tscene.add( result );\n\n\t// add wireframe representation\n\twireframeResult = new THREE.Mesh( result.geometry, new THREE.MeshBasicMaterial( {\n\t\twireframe: true,\n\t\tcolor: 0,\n\t\topacity: 0.15,\n\t\ttransparent: true,\n\t} ) );\n\twireframeResult.material.color.set( 0x001516 ).convertSRGBToLinear();\n\twireframeResult.visible = false;\n\tscene.add( wireframeResult );\n\n\t// gui\n\tgui = new GUI();\n\tgui.add( wireframeResult, 'visible' ).name( 'wireframe' );\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n\n}\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\trenderer.render( scene, camera );\n\n}\n"],"names":["$ilwiq","parcelRequire","$8cedf881c69d35f5$var$renderer","$8cedf881c69d35f5$var$camera","$8cedf881c69d35f5$var$scene","$8cedf881c69d35f5$var$controls","$8cedf881c69d35f5$var$gui","$8cedf881c69d35f5$var$light","$8cedf881c69d35f5$var$wireframeResult","async","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","outputEncoding","sRGBEncoding","document","body","appendChild","domElement","Scene","DirectionalLight","position","set","add","AmbientLight","shadowCam","shadow","camera","castShadow","mapSize","setScalar","bias","normalBias","left","bottom","right","top","updateProjectionMatrix","PerspectiveCamera","far","$5Rd1x","OrbitControls","floor","Mesh","PlaneBufferGeometry","ShadowMaterial","opacity","material","color","convertSRGBToLinear","rotation","x","Math","PI","scale","y","receiveShadow","redMaterial","MeshStandardMaterial","roughness","greenMaterial","blueMaterial","cylinder1","$4CEV9","Brush","CylinderBufferGeometry","updateMatrixWorld","cylinder2","cylinder3","z","sphere","SphereBufferGeometry","box","BoxBufferGeometry","evaluator","Evaluator","result","evaluate","ADDITION","SUBTRACTION","INTERSECTION","geometry","MeshBasicMaterial","wireframe","transparent","visible","$jiuw3","GUI","name","addEventListener","aspect","$8cedf881c69d35f5$var$init","$8cedf881c69d35f5$var$render","requestAnimationFrame","render"],"version":3,"file":"multimaterial.c2f3e7cf.js.map"}